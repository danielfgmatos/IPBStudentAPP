<?php

namespace app\modules\api\v1\controllers;



use app\modules\api\v1\resources\UserResource;

use DOMDocument;
use DOMXPath;
use Yii;
use yii\db\Query;
use yii\filters\auth\HttpBearerAuth;
use yii\httpclient\Client;
use yii\rest\ActiveController;
use simplehtmldom\HtmlDocument;
use function GuzzleHttp\Psr7\str;


/**
 * Default controller for the `api-v1` module
 */
class TesteController extends ActiveController
{
    public $modelClass = 'app\models\Teste';
    /**
     * Renders the index view for the module
     * @return array|array[]|string
     */
    /*public function behaviors()
    {
        $behaviours = parent::behaviors(); // TODO: Change the autogenerated stub
        $behaviours['authenticator']['authMethods'] = [
            HttpBearerAuth::class
        ];

        return $behaviours;
    }*/
    public function actionGetTeste($codigo_disciplina, $sessionCookie)
    {

        $user = UserResource::findOne(Yii::$app->user->identity);
        $userSessionId = $user->sessionId;
        $numero_mecanografico = $user->numero_mecanografico;

        $clientTeste = new Client(['baseUrl' => 'https://testing.estig.ipb.pt/sakai-ws/rest/',
            'responseConfig' => [
                'format' => Client::FORMAT_JSON
            ],]);

        $responseTeste = $clientTeste->get('sakai/getPagesAndToolsForSiteForCurrentUser', ['sessionid' => $userSessionId, 'siteid' => $codigo_disciplina])->setHeaders(['content-type' => 'application/json', 'authorization' => `Bearer $user->token`])->send();
        $xml = simplexml_load_string($responseTeste->content);


        //$length = count($titles);

        $length = count($xml->pages->page);
        for ($i = 0; $i < $length; $i++) {
            if ($xml->pages->page[$i]->{'page-title'} == "Testes Online") {
                $toolId = $xml->pages->page[$i]->tools->tool->attributes()->id;
            };
        }

        try {
            $ch = curl_init();

            // Check if initialization had gone wrong*
            if ($ch === false) {
                throw new Exception('failed to initialize');
            }
            // Better to explicitly set URL


            curl_setopt($ch, CURLOPT_URL, "https://testing.estig.ipb.pt/portal/site/$codigo_disciplina/tool/$toolId/jsf/index/mainIndex");
            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
            curl_setopt($ch, CURLOPT_COOKIE, "$sessionCookie");
            curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
            // That needs to be set; content will spill to STDOUT otherwise
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
            // Set more options
            $content = curl_exec($ch);


            if ($content === false) {
                throw new Exception(curl_error($ch), curl_errno($ch));
            }

            // Check HTTP return code, too; might be something else than 200
            $httpReturnCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
            $httpReturnURL = curl_getinfo($ch, CURLINFO_EFFECTIVE_URL);

            $html = new DOMDocument();
            @$html->loadHTML($content);
            $xpath = new DOMXPath($html);

            $queryPathTitle = [];
            $titles = [];

            $queryPathScore = [];
            $scores = [];

            $queryPathSubmit = [];
            $submited = [];

            $testes = [];

            $queryPath = $xpath->query('//tbody/tr');

            $lengthQ = $queryPath->length;

            for($i = 1; $i <= $lengthQ; $i++)
            {
                if($i % 2 == 0)
                {
                    $queryPathTitle[] = "//tbody/tr[" . strval($i) . "]/td/span[@class='hidden']";
                    $queryPathScore[] = "//tbody/tr[" . strval($i) . "]/td[5]";
                    $queryPathSubmit[] = "//tbody/tr[" . strval($i) . "]/td[7]";
                }
            }

            for($i = 0; $i < count($queryPathTitle); $i++)
            {
                $xpathQueryTitle = $queryPathTitle[$i];
                $xpathQueryScore = $queryPathScore[$i];
                $xpathQuerySubmit = $queryPathSubmit[$i];

                foreach($xpath->query($xpathQueryTitle) as $title)
                {
                    array_push($titles, $title->textContent);
                }

                foreach($xpath->query($xpathQueryScore) as $score)
                {
                    array_push($scores, $score->textContent);
                }

                foreach($xpath->query($xpathQuerySubmit) as $submit)
                {
                    array_push($submited, $submit->textContent);
                }
            }

            for ($i = 0; $i < count($titles); $i++) {
                array_unshift($testes, (object)['id' => $i + 1, 'titulo' => $titles[$i], 'nota' => $scores[$i], 'submetido' => $submited[$i]]);
            }

        } catch (Exception $e) {

            trigger_error(sprintf(
                'Curl failed with error #%d: %s',
                $e->getCode(), $e->getMessage()),
                E_USER_ERROR);
        }


if ($testes == "Array ()")  {
    return "Ã‰ nullo";
}
       $connection = \Yii::$app->db;

        foreach ($testes as $teste) {
            $connection->createCommand()->upsert('teste', [
                'id_teste' => $teste->id,
                'titulo' => $teste->titulo,
                'nota' => $teste->nota,
                'data_submetido' => $teste->submetido,
                'codigo_disciplina_fk' => $codigo_disciplina,
                'numero_mecanografico_fk' => $user->numero_mecanografico
            ])->execute();
        }

        $query = new Query();
        return $query
            ->from('teste')
            ->where(['codigo_disciplina_fk' => $codigo_disciplina])
            ->andWhere(['numero_mecanografico_fk' => $numero_mecanografico])
            ->all();

    }

    public function actionFetchTeste ($codigo_disciplina) {

        $user = UserResource::findOne(Yii::$app->user->identity);
        $numero_mecanografico = $user->numero_mecanografico;

        $query = new Query();
        return $query
            ->from('teste')
            ->where(['codigo_disciplina_fk' => $codigo_disciplina])
            ->andWhere(['numero_mecanografico_fk' => $numero_mecanografico])
            ->all();
    }
}
