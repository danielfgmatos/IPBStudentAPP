<?php

namespace app\modules\api\v1\controllers;



use app\modules\api\v1\resources\UserResource;

use DOMDocument;
use RecursiveDirectoryIterator;
use RecursiveIteratorIterator;
use Yii;
use yii\db\Query;
use yii\filters\auth\HttpBearerAuth;
use yii\httpclient\Client;
use yii\rest\ActiveController;
use simplehtmldom\HtmlDocument;

/**
 * Default controller for the `api-v1` module
 */
class RecursoController extends ActiveController
{
    public $modelClass = 'app\models\recurso';
    /**
     * Renders the index view for the module
     * @return array|array[]|string
     */
    /*public function behaviors()
    {
        $behaviours = parent::behaviors(); // TODO: Change the autogenerated stub
        $behaviours['authenticator']['authMethods'] = [
            HttpBearerAuth::class
        ];

        return $behaviours;
    }*/
    public function actionGetRecurso($codigo_disciplina)
    {
        $user = UserResource::findOne(Yii::$app->user->identity);
        $userSessionId = $user->sessionId;

        $clientRecurso = new Client(['baseUrl' => 'https://testing.estig.ipb.pt/sakai-ws/rest/',
            'responseConfig' => [
                'format' => Client::FORMAT_JSON
            ],]);

        $responseRecurso = $clientRecurso->get('contenthosting/getUserResources', ['sessionid' => $userSessionId, 'siteId' => $codigo_disciplina])->send();
        $xml = simplexml_load_string($responseRecurso->content);

        $recursos = [];
        $dirName = [];

        for ($i = 0; $i < count($xml); $i++) {
            $link = str_replace('https://testing.estig.ipb.pt/web/group/' . $codigo_disciplina . '/', '', $xml->item[$i]);
            array_push($recursos, (object)['id' => $i + 1, 'link' => $link, 'codigo_disciplina_fk' => $codigo_disciplina]);
        }

        for ($i = 0; $i < count($recursos); $i++) {
            $dir = pathinfo($codigo_disciplina . '/' . $recursos[$i]->link, PATHINFO_DIRNAME);
            $ext = pathinfo($recursos[$i]->link, PATHINFO_EXTENSION);

            if (!in_array(pathinfo($recursos[$i]->link, PATHINFO_DIRNAME), $dirName, true)) {
                array_push($dirName, pathinfo($recursos[$i]->link, PATHINFO_DIRNAME));
            }

            if (!file_exists(urldecode($dir))) {
                mkdir(urldecode($dir), 0777, true);
            } else

                $fileUrl = 'https://testing.estig.ipb.pt/web/group/' . $codigo_disciplina . '/' . $recursos[$i]->link;
            $file_name = basename($fileUrl);
            $saveTo = pathinfo(getcwd() . "\\" . $codigo_disciplina . "\\" . urldecode($recursos[$i]->link), PATHINFO_DIRNAME);

            if (!file_exists($saveTo . '/' . $file_name)) {
                //echo "File Already Exists" . $i . "\n";
                if ($ext != 'URL') {
                    if (file_put_contents($saveTo . '/' . urldecode($file_name), file_get_contents($fileUrl))) {
                        //echo $ext . "\n";
                    }
                } else {
                    if (file_put_contents($saveTo . '/' . $file_name, file_get_contents($fileUrl))) {
                        //echo $ext . "\n";
                    }
                }
            }
        }

        function listFoldersFiles($dir, $codigo_disciplina)
        {
            $return = [];
            $azure = 'https://ipbstudentmobileapp.azurewebsites.net';

            if (is_dir($dir)) {

                $dh = scandir($dir);

                foreach ($dh as $folder) {
                    if ($folder != '.' && $folder != '..') {
                        if (is_dir($dir . DIRECTORY_SEPARATOR . $folder) === true) {
                            $return[$folder] = listFoldersFiles($dir . DIRECTORY_SEPARATOR . $folder, $codigo_disciplina);
                        } else {
                            $dirTemp = str_replace(getcwd() . DIRECTORY_SEPARATOR . $codigo_disciplina, '', $dir);

                            $return[$folder] = array(
                                'id' => uniqid(),
                                'ficheiro' => $folder,
                                'link' => $codigo_disciplina . $dirTemp . DIRECTORY_SEPARATOR . $folder,
                                'linkCompleto' => $azure . DIRECTORY_SEPARATOR . $codigo_disciplina . $dirTemp . DIRECTORY_SEPARATOR . $folder,
                                'tipo' => 'file',
                                'extensao' => pathinfo($folder, PATHINFO_EXTENSION),
                            );
                        }
                    }
                }
            }
            return $return;
        }
        $dir = listFoldersFiles(getcwd() . "\\" . $codigo_disciplina, $codigo_disciplina);
        return $dir;
    }
}
